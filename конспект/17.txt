Механизм поиска. 

Создаем MyInput, добавляем ему placeholder="Поиск..." 

Затем делаем его управляемым 
const [searchQuery, setSearchQuery] = setState("");

Добавляем значение в компонент и прослушиватель событий onChange
<MyInput
    value={searchQuery}
    onChange={event => setSearchQuery(event.target.value)}
    placeholder="Поиск..." 
/>

Управляемый компонент создан. Но есть некоторые проблемы, то есть мы должны сделать фильтрацию постов при поиске, то есть отрисовывать посты, которые мы ищем а не нужные посты удалять из массива. Но их потребуется как то возвращать. Есть один механизм который мы сможем использовать. 

Определяем механизм сортировки в переменную, и используем уже состояние в фильтре
const [selectedSort, setSelectedSort] = useState("");
const sortedPosts = [...posts].sort((a, b) => a[selectedSort].localeCompare(b[selectedSort]));

Так же в компонент со списком постов передаем уже не просто состояние, а отсортированный массив постов
<PostList remove={removePost} posts={sortedPosts} title={"Языки программирования"} />


Так как состояние selectedSort у нас по умолчанию принимает пустую строку, то просто будет ошибка. Потому что мы вызываем несуществующее поле и вызываем функцию localeCompare, таким образом вызываем функцию у undefined. Для решения этой проблемы мы создаем функцию getSortedPosts, где проверяем состояние selectedSort, что там не пустая строка, то будем возвращать отсортированный массив иначе просто возвращать массив постов

function getSortedPosts() {
    if(selectedSort) {
        return [...posts].sort((a, b) => a[selectedSort].localeCompare(b[selectedSort]));
    }
    return posts;
}

А в переменную sortedPosts помещаем результат выполнения функции getSortedPosts
const sortedPosts = getSortedPosts();

При сортировке, функция будет вызываться. Но при вводе символов в поле поиска, функция будет вызываться каждый раз, это будет плохо сказываться на производительности, так как идет перерисовка при написании каждого символа в строке поиска. 

Хук useMemo. Первым параметром этот хук принимает некоторый коллбек, а вторым параметром принимает массив зависимостей. Эта функция производит вычисления, в данном случае сортирует массив, запоминает результат этих вычислений и кеширует, другими словами мемоизация. И на каждую перерисовку компонента, эта функция не пересчитывает заново, не сортирует массив по новой а достает отсортированный массив из кэша.

Но каждый раз когда одна из зависимостей измененилась, к примеру поменяли алгоритм сортировки, к примеру не по заголовку а по описанию, то функция вновь пересчитывает и кеширует результат вычисления до тех пор пока одна из зависимостей не поменяется. Если массив зависимостей пустой, то функция сработает один раз, запомнит результат и больше не будет вызвана.

Коллбек должен возвращать результат каких то вычислений, например отсортированный или отфильтрованный массив, математические операции и т.д. То есть результат каких то вычислений. В зависимости можно передавать какие то переменные, поля объектов
useMemo(() => {
    return [...posts].sort(...)
}, [selectedSort, posts])



Теперь в переменную sortedPosts помещаем хук useMemo, передаем в него коллбек функцию и массив зависимостей. Данный коллбек будет вызван только тогда, когда одна из зависимостей поменяет свое значение. В данном случае мы следим за алгоритмом сортировки и массивом с постами. То есть если мы добавили новый пост, то этот массив надо отсортировать. Переносим логику сортировки из функции getSortedPosts в хук useMemo. Теперь хук отрабатывает при смене алгоритма сортировки, а при смене значения в input не вызывается. Так же он вызывается при добавлении или удалении поста в массив.

const [posts, setPosts] = useState([
    { id: 1, title: "JavaScript", body: "Description" },
    { id: 2, title: "PHP", body: "Description" },
    { id: 3, title: "Java", body: "Description" },
]);

const [selectedSort, setSelectedSort] = useState("");

const sortedPosts = useMemo(() => {
    if(selectedSort) {
        return [...posts].sort((a, b) => a[selectedSort].localeCompare(b[selectedSort]));
    }
    return posts;
}, [selectedSort, posts])



Такми образом мы получили в константе sortedPosts новый отсортированный массив, при этом основной массив с постами не изменяется. Теперь мы можем делать поиск на основании этого нового массива. 

Создаем функцию с хуком useMemo. В массив зависимостей попадает значение из поисковой строки и уже отсортированный массив. В данном случае на основании поисковой строки мы должны отфильтровать массив постов. Обращаемся к названию поста, вызываем функцию includes и передаем туда поисковую строку. Таким образом мы отфильтруем массив постов, и оставим те посты, где присутствует поисковый запрос. Так как поиск регистрозависим, то вызываем функцию toLowerCase() 
const sortedAndSearchedPosts = useMemo(() => {
    return sortedPosts.filter(post => post.title.toLowerCase().includes(searchQuery.toLowerCase()))
}, [searchQuery, sortedPosts])

Так же в компонент со списком постов теперь будем передавать массив отфильтрованный и отсортированный
<PostList remove={removePost} posts={sortedAndSearchedPosts} title={"Языки программирования"} />



Теперь не отображается текст при отсутствии постов, меняем условие для другого массива
{sortedAndSearchedPosts.length 
    ? <PostList remove={removePost} posts={sortedAndSearchedPosts} title={"Языки программирования"} /> 
    : <h1 style={{ textAlign: 'center', color: 'green', }}>{title}</h1>
}



Делаем декомпозицию комопнента. Создаем компонент фильтрации постов. В нем использовалось два состояния, для поисковой строки и сортировки. Теперь поменям немного логику. Через props мы передаем filter - это будет некоторый объект и setFilter - функция которая изменяет этот объект, так как мы должны иметь доступ к фильтру в родительском компоненте. 

Эти два состояния можем удалить
const [selectedSort, setSelectedSort] = useState("");
const [searchQuery, setSearchQuery] = setState("");

И написать одно состояние. Это будет состояние filter и функция для изменения состояния. По умолчанию хук useState будет принимать объект, в котором есть два поля, алгоритм сортировки и поисковая строка
const [filter, setFilter] = useState({ sort: "", query: "" });

Так как мы удалили предыдущие два состояния, то вноссим корректировки
const sortedPosts = useMemo(() => {
    console.log("Функция сортировки постов отработала");
    if (filter.sort) {
        return [...posts].sort((a, b) => a[filter.sort].localeCompare(b[filter.sort]))
    }
    return posts;
}, [filter.sort, posts]);

const sortedAndSearchedPosts = useMemo(() => {
    return sortedPosts.filter((post) => post.title.toLowerCase().includes(filter.query.toLowerCase()));
}, [filter.query, sortedPosts]);

Теперь за логику смены алгоритма сортировки отвечает компонент PostFilter. Теперь передаем функцию для смены состояния в комопнент
<PostFilter filter={filter} setFilter={setFilter} />



Теперь вносим в компонент правки
import React from 'react';
import MyInput from './UI/input/MyInput';
import MySelect from './UI/select/MySelect';

const PostFilter = ({ filter, setFilter }) => {
    return (
        <div>
            <MyInput
                Получаем значения для input из объекта
                value={filter.query}
                И реализуем двуусторонне связывание, мы меняем объект, где разворачиваем старый объект и заменяем одно поле
                onChange={event => setFilter({ ...filter, query: event.target.value })}
                placeholder="Поиск..." />
            <MySelect
                В данном случае select возвращает выбранный алгоритм сортировки (опцию) а не event
                onChange={selectedSort => setFilter({ ...filter, sort: selectedSort })}
                value={filter.sort}
                options={[
                    {
                        value: "title",
                        name: "По названию"
                    },
                    {
                        value: "body",
                        name: "По описанию"
                    }
                ]}
                defaultValue="Сортировка" />
        </div>
    );
};

export default PostFilter;
